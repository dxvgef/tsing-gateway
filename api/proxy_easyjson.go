// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package api

import (
	json "encoding/json"
	global "github.com/dxvgef/tsing-gateway/global"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6fc2bfdaDecodeGithubComDxvgefTsingGatewayApi(in *jlexer.Lexer, out *Proxy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "middleware":
			out.Middleware = string(in.String())
		case "hosts":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Hosts = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.Hosts)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "routes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Routes = make(map[string]map[string]map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 map[string]map[string]string
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						v2 = make(map[string]map[string]string)
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v3 map[string]string
							if in.IsNull() {
								in.Skip()
							} else {
								in.Delim('{')
								v3 = make(map[string]string)
								for !in.IsDelim('}') {
									key := string(in.String())
									in.WantColon()
									var v4 string
									v4 = string(in.String())
									(v3)[key] = v4
									in.WantComma()
								}
								in.Delim('}')
							}
							(v2)[key] = v3
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.Routes)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "upstreams":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Upstreams = make(map[string]global.UpstreamType)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 global.UpstreamType
					(v5).UnmarshalEasyJSON(in)
					(out.Upstreams)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6fc2bfdaEncodeGithubComDxvgefTsingGatewayApi(out *jwriter.Writer, in Proxy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"middleware\":"
		out.RawString(prefix[1:])
		out.String(string(in.Middleware))
	}
	{
		const prefix string = ",\"hosts\":"
		out.RawString(prefix)
		if in.Hosts == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.Hosts {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				out.String(string(v6Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"routes\":"
		out.RawString(prefix)
		if in.Routes == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.Routes {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				if v7Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v8First := true
					for v8Name, v8Value := range v7Value {
						if v8First {
							v8First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v8Name))
						out.RawByte(':')
						if v8Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
							out.RawString(`null`)
						} else {
							out.RawByte('{')
							v9First := true
							for v9Name, v9Value := range v8Value {
								if v9First {
									v9First = false
								} else {
									out.RawByte(',')
								}
								out.String(string(v9Name))
								out.RawByte(':')
								out.String(string(v9Value))
							}
							out.RawByte('}')
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"upstreams\":"
		out.RawString(prefix)
		if in.Upstreams == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.Upstreams {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				(v10Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Proxy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6fc2bfdaEncodeGithubComDxvgefTsingGatewayApi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Proxy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6fc2bfdaEncodeGithubComDxvgefTsingGatewayApi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Proxy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6fc2bfdaDecodeGithubComDxvgefTsingGatewayApi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Proxy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6fc2bfdaDecodeGithubComDxvgefTsingGatewayApi(l, v)
}
