// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package cors

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE7f5bc6fDecodeLocalMiddlewareCors(in *jlexer.Lexer, out *CORS) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "allow_origins":
			if in.IsNull() {
				in.Skip()
				out.AllowOrigins = nil
			} else {
				in.Delim('[')
				if out.AllowOrigins == nil {
					if !in.IsDelim(']') {
						out.AllowOrigins = make([]string, 0, 4)
					} else {
						out.AllowOrigins = []string{}
					}
				} else {
					out.AllowOrigins = (out.AllowOrigins)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.AllowOrigins = append(out.AllowOrigins, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "expose_headers":
			if in.IsNull() {
				in.Skip()
				out.ExposeHeaders = nil
			} else {
				in.Delim('[')
				if out.ExposeHeaders == nil {
					if !in.IsDelim(']') {
						out.ExposeHeaders = make([]string, 0, 4)
					} else {
						out.ExposeHeaders = []string{}
					}
				} else {
					out.ExposeHeaders = (out.ExposeHeaders)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.ExposeHeaders = append(out.ExposeHeaders, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "allow_credentials":
			out.AllowCredentials = bool(in.Bool())
		case "allow_methods":
			if in.IsNull() {
				in.Skip()
				out.AllowMethods = nil
			} else {
				in.Delim('[')
				if out.AllowMethods == nil {
					if !in.IsDelim(']') {
						out.AllowMethods = make([]string, 0, 4)
					} else {
						out.AllowMethods = []string{}
					}
				} else {
					out.AllowMethods = (out.AllowMethods)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.AllowMethods = append(out.AllowMethods, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "allow_headers":
			if in.IsNull() {
				in.Skip()
				out.AllowHeaders = nil
			} else {
				in.Delim('[')
				if out.AllowHeaders == nil {
					if !in.IsDelim(']') {
						out.AllowHeaders = make([]string, 0, 4)
					} else {
						out.AllowHeaders = []string{}
					}
				} else {
					out.AllowHeaders = (out.AllowHeaders)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.AllowHeaders = append(out.AllowHeaders, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE7f5bc6fEncodeLocalMiddlewareCors(out *jwriter.Writer, in CORS) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.AllowOrigins) != 0 {
		const prefix string = ",\"allow_origins\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v5, v6 := range in.AllowOrigins {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if len(in.ExposeHeaders) != 0 {
		const prefix string = ",\"expose_headers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v7, v8 := range in.ExposeHeaders {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	if in.AllowCredentials {
		const prefix string = ",\"allow_credentials\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AllowCredentials))
	}
	if len(in.AllowMethods) != 0 {
		const prefix string = ",\"allow_methods\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.AllowMethods {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	if len(in.AllowHeaders) != 0 {
		const prefix string = ",\"allow_headers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.AllowHeaders {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CORS) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE7f5bc6fEncodeLocalMiddlewareCors(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CORS) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE7f5bc6fEncodeLocalMiddlewareCors(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CORS) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE7f5bc6fDecodeLocalMiddlewareCors(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CORS) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE7f5bc6fDecodeLocalMiddlewareCors(l, v)
}
