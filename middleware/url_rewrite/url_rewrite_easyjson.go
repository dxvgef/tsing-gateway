// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package url_rewrite

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8b42b748DecodeLocalMiddlewareUrlRewrite(in *jlexer.Lexer, out *URLRewrite) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "prefix":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Prefix = make(map[string]string)
				} else {
					out.Prefix = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.Prefix)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "suffix":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Suffix = make(map[string]string)
				} else {
					out.Suffix = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.Suffix)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "replace":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Replace = make(map[string]string)
				} else {
					out.Replace = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 string
					v3 = string(in.String())
					(out.Replace)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8b42b748EncodeLocalMiddlewareUrlRewrite(out *jwriter.Writer, in URLRewrite) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Prefix) != 0 {
		const prefix string = ",\"prefix\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Prefix {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				out.String(string(v4Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Suffix) != 0 {
		const prefix string = ",\"suffix\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Suffix {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.String(string(v5Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Replace) != 0 {
		const prefix string = ",\"replace\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.Replace {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				out.String(string(v6Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v URLRewrite) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8b42b748EncodeLocalMiddlewareUrlRewrite(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v URLRewrite) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8b42b748EncodeLocalMiddlewareUrlRewrite(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *URLRewrite) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8b42b748DecodeLocalMiddlewareUrlRewrite(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *URLRewrite) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8b42b748DecodeLocalMiddlewareUrlRewrite(l, v)
}
