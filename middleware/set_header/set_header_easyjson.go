// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package set_header

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD355d48DecodeGithubComDxvgefTsingGatewayMiddlewareSetHeader(in *jlexer.Lexer, out *SetHeader) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "request_header":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.RequestHeader = make(map[string]string)
				} else {
					out.RequestHeader = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.RequestHeader)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "response_header":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ResponseHeader = make(map[string]string)
				} else {
					out.ResponseHeader = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.ResponseHeader)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD355d48EncodeGithubComDxvgefTsingGatewayMiddlewareSetHeader(out *jwriter.Writer, in SetHeader) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.RequestHeader) != 0 {
		const prefix string = ",\"request_header\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v3First := true
			for v3Name, v3Value := range in.RequestHeader {
				if v3First {
					v3First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v3Name))
				out.RawByte(':')
				out.String(string(v3Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.ResponseHeader) != 0 {
		const prefix string = ",\"response_header\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.ResponseHeader {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				out.String(string(v4Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetHeader) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD355d48EncodeGithubComDxvgefTsingGatewayMiddlewareSetHeader(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetHeader) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD355d48EncodeGithubComDxvgefTsingGatewayMiddlewareSetHeader(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetHeader) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD355d48DecodeGithubComDxvgefTsingGatewayMiddlewareSetHeader(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetHeader) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD355d48DecodeGithubComDxvgefTsingGatewayMiddlewareSetHeader(l, v)
}
