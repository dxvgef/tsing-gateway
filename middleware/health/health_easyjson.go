// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package health

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson53c2c5caDecodeGithubComDxvgefTsingGatewayMiddlewareHealth(in *jlexer.Lexer, out *Health) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "active":
			easyjson53c2c5caDecode(in, &out.Active)
		case "passive":
			easyjson53c2c5caDecode1(in, &out.Passive)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson53c2c5caEncodeGithubComDxvgefTsingGatewayMiddlewareHealth(out *jwriter.Writer, in Health) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"active\":"
		first = false
		out.RawString(prefix[1:])
		easyjson53c2c5caEncode(out, in.Active)
	}
	if true {
		const prefix string = ",\"passive\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson53c2c5caEncode1(out, in.Passive)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Health) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson53c2c5caEncodeGithubComDxvgefTsingGatewayMiddlewareHealth(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Health) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson53c2c5caEncodeGithubComDxvgefTsingGatewayMiddlewareHealth(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Health) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson53c2c5caDecodeGithubComDxvgefTsingGatewayMiddlewareHealth(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Health) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson53c2c5caDecodeGithubComDxvgefTsingGatewayMiddlewareHealth(l, v)
}
func easyjson53c2c5caDecode1(in *jlexer.Lexer, out *struct {
	On  bool `json:"on,omitempty"`
	TTL int  `json:"ttl,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "on":
			out.On = bool(in.Bool())
		case "ttl":
			out.TTL = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson53c2c5caEncode1(out *jwriter.Writer, in struct {
	On  bool `json:"on,omitempty"`
	TTL int  `json:"ttl,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.On {
		const prefix string = ",\"on\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.On))
	}
	if in.TTL != 0 {
		const prefix string = ",\"ttl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TTL))
	}
	out.RawByte('}')
}
func easyjson53c2c5caDecode(in *jlexer.Lexer, out *struct {
	On               bool   `json:"on,omitempty"`
	Interval         int    `json:"interval,omitempty"`
	URL              string `json:"url,omitempty"`
	FailureStateCode []int  `json:"failure_state_code,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "on":
			out.On = bool(in.Bool())
		case "interval":
			out.Interval = int(in.Int())
		case "url":
			out.URL = string(in.String())
		case "failure_state_code":
			if in.IsNull() {
				in.Skip()
				out.FailureStateCode = nil
			} else {
				in.Delim('[')
				if out.FailureStateCode == nil {
					if !in.IsDelim(']') {
						out.FailureStateCode = make([]int, 0, 8)
					} else {
						out.FailureStateCode = []int{}
					}
				} else {
					out.FailureStateCode = (out.FailureStateCode)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int
					v1 = int(in.Int())
					out.FailureStateCode = append(out.FailureStateCode, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson53c2c5caEncode(out *jwriter.Writer, in struct {
	On               bool   `json:"on,omitempty"`
	Interval         int    `json:"interval,omitempty"`
	URL              string `json:"url,omitempty"`
	FailureStateCode []int  `json:"failure_state_code,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.On {
		const prefix string = ",\"on\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.On))
	}
	if in.Interval != 0 {
		const prefix string = ",\"interval\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Interval))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	if len(in.FailureStateCode) != 0 {
		const prefix string = ",\"failure_state_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.FailureStateCode {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
