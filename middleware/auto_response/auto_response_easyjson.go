// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package auto_response

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3a8a5373DecodeLocalMiddlewareAutoResponse(in *jlexer.Lexer, out *Rule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "method":
			out.Method = string(in.String())
		case "status":
			out.Status = int(in.Int())
		case "data":
			out.Data = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3a8a5373EncodeLocalMiddlewareAutoResponse(out *jwriter.Writer, in Rule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix[1:])
		out.String(string(in.Method))
	}
	if in.Status != 0 {
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	if in.Data != "" {
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.String(string(in.Data))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Rule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3a8a5373EncodeLocalMiddlewareAutoResponse(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Rule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3a8a5373EncodeLocalMiddlewareAutoResponse(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Rule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3a8a5373DecodeLocalMiddlewareAutoResponse(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Rule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3a8a5373DecodeLocalMiddlewareAutoResponse(l, v)
}
func easyjson3a8a5373DecodeLocalMiddlewareAutoResponse1(in *jlexer.Lexer, out *AutoResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3a8a5373EncodeLocalMiddlewareAutoResponse1(out *jwriter.Writer, in AutoResponse) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AutoResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3a8a5373EncodeLocalMiddlewareAutoResponse1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AutoResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3a8a5373EncodeLocalMiddlewareAutoResponse1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AutoResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3a8a5373DecodeLocalMiddlewareAutoResponse1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AutoResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3a8a5373DecodeLocalMiddlewareAutoResponse1(l, v)
}
