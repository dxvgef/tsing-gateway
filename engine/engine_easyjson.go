// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package engine

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson42c839f2DecodeGithubComDxvgefTsingGatewayEngine(in *jlexer.Lexer, out *Engine) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "middleware":
			if in.IsNull() {
				in.Skip()
				out.Middleware = nil
			} else {
				in.Delim('[')
				if out.Middleware == nil {
					if !in.IsDelim(']') {
						out.Middleware = make([]Configurator, 0, 2)
					} else {
						out.Middleware = []Configurator{}
					}
				} else {
					out.Middleware = (out.Middleware)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Configurator
					easyjson42c839f2DecodeGithubComDxvgefTsingGatewayEngine1(in, &v1)
					out.Middleware = append(out.Middleware, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hosts":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Hosts = make(map[string]string)
				} else {
					out.Hosts = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.Hosts)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "routes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Routes = make(map[string]map[string]map[string]string)
				} else {
					out.Routes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 map[string]map[string]string
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v3 = make(map[string]map[string]string)
						} else {
							v3 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v4 map[string]string
							if in.IsNull() {
								in.Skip()
							} else {
								in.Delim('{')
								if !in.IsDelim('}') {
									v4 = make(map[string]string)
								} else {
									v4 = nil
								}
								for !in.IsDelim('}') {
									key := string(in.String())
									in.WantColon()
									var v5 string
									v5 = string(in.String())
									(v4)[key] = v5
									in.WantComma()
								}
								in.Delim('}')
							}
							(v3)[key] = v4
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.Routes)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "upstreams":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Upstreams = make(map[string]Upstream)
				} else {
					out.Upstreams = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 Upstream
					easyjson42c839f2DecodeGithubComDxvgefTsingGatewayEngine2(in, &v6)
					(out.Upstreams)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42c839f2EncodeGithubComDxvgefTsingGatewayEngine(out *jwriter.Writer, in Engine) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Middleware) != 0 {
		const prefix string = ",\"middleware\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v7, v8 := range in.Middleware {
				if v7 > 0 {
					out.RawByte(',')
				}
				easyjson42c839f2EncodeGithubComDxvgefTsingGatewayEngine1(out, v8)
			}
			out.RawByte(']')
		}
	}
	if len(in.Hosts) != 0 {
		const prefix string = ",\"hosts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v9First := true
			for v9Name, v9Value := range in.Hosts {
				if v9First {
					v9First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v9Name))
				out.RawByte(':')
				out.String(string(v9Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Routes) != 0 {
		const prefix string = ",\"routes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.Routes {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				if v10Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v11First := true
					for v11Name, v11Value := range v10Value {
						if v11First {
							v11First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v11Name))
						out.RawByte(':')
						if v11Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
							out.RawString(`null`)
						} else {
							out.RawByte('{')
							v12First := true
							for v12Name, v12Value := range v11Value {
								if v12First {
									v12First = false
								} else {
									out.RawByte(',')
								}
								out.String(string(v12Name))
								out.RawByte(':')
								out.String(string(v12Value))
							}
							out.RawByte('}')
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Upstreams) != 0 {
		const prefix string = ",\"upstreams\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v13First := true
			for v13Name, v13Value := range in.Upstreams {
				if v13First {
					v13First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v13Name))
				out.RawByte(':')
				easyjson42c839f2EncodeGithubComDxvgefTsingGatewayEngine2(out, v13Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Engine) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson42c839f2EncodeGithubComDxvgefTsingGatewayEngine(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Engine) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42c839f2EncodeGithubComDxvgefTsingGatewayEngine(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Engine) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson42c839f2DecodeGithubComDxvgefTsingGatewayEngine(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Engine) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42c839f2DecodeGithubComDxvgefTsingGatewayEngine(l, v)
}
func easyjson42c839f2DecodeGithubComDxvgefTsingGatewayEngine2(in *jlexer.Lexer, out *Upstream) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "middleware":
			if in.IsNull() {
				in.Skip()
				out.Middleware = nil
			} else {
				in.Delim('[')
				if out.Middleware == nil {
					if !in.IsDelim(']') {
						out.Middleware = make([]Configurator, 0, 2)
					} else {
						out.Middleware = []Configurator{}
					}
				} else {
					out.Middleware = (out.Middleware)[:0]
				}
				for !in.IsDelim(']') {
					var v14 Configurator
					easyjson42c839f2DecodeGithubComDxvgefTsingGatewayEngine1(in, &v14)
					out.Middleware = append(out.Middleware, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "explorer":
			easyjson42c839f2DecodeGithubComDxvgefTsingGatewayEngine1(in, &out.Explorer)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42c839f2EncodeGithubComDxvgefTsingGatewayEngine2(out *jwriter.Writer, in Upstream) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if len(in.Middleware) != 0 {
		const prefix string = ",\"middleware\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v15, v16 := range in.Middleware {
				if v15 > 0 {
					out.RawByte(',')
				}
				easyjson42c839f2EncodeGithubComDxvgefTsingGatewayEngine1(out, v16)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"explorer\":"
		out.RawString(prefix)
		easyjson42c839f2EncodeGithubComDxvgefTsingGatewayEngine1(out, in.Explorer)
	}
	out.RawByte('}')
}
func easyjson42c839f2DecodeGithubComDxvgefTsingGatewayEngine1(in *jlexer.Lexer, out *Configurator) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "config":
			out.Config = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42c839f2EncodeGithubComDxvgefTsingGatewayEngine1(out *jwriter.Writer, in Configurator) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"config\":"
		out.RawString(prefix)
		out.String(string(in.Config))
	}
	out.RawByte('}')
}
